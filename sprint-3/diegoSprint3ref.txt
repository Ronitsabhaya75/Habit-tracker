Sprint 3 summary

During sprint 3 time period I analyzed and went through habit-trackerB containing our back end files for our project making changes and updates based on my assessments in order to sync front end local storage with back end mongo database.

ACCOMPLISHMENTS-
I made changes to middleware, models and routes in habit-trackerB to suit ES module format as that is front ends, in order for integration to follow smoothly, and for consistency. Updated server.js in root to suit new functionality.

Furthermore, I added 3 new files to allow integration, LocalData.js in models folder, LocalStorageRoutes.js in routes folder, and localStorageSync.js in habit-tracker (front end) public folder.

LocalData.js: This file defines a mongoose model for managing user specfic local data in a mongoDB database, facilitating user identificaftion, storage keys, and values allowing for smooth retrieving, creating and parsing of data. 

LocalStorageRoutes.js: This files defines an express touter with endpoints for managing local storage data in the mongoDB database, providing routes for saving, updating, retrieving, and delting of data with proper error handing acting as the api controller.

localStorageSync.js: This file facilites the creating, updating, retrieval and deletion of user specific local storage data acting as the client layer script.

CHALLENGES-
Challenges I encountered during this sprint was firstly installing MongoDB and correctly configuring it with the project.
I encountered many errors when it came to mongoDB having trouble with the installment of it, as I kept recieving errors in my terminal.
I was under the assumption my code was faulty for a while, but then debugged it to the mongoDB not properly configured, and then
debugged it even further to pinpoint the issue that mongoDB simply was not running, thus it needing to be turned on a local port through my command shell. After that, mongoDB would be on and the project would run smoothly. 

LEARNED-
I gained valuable insight with mongoDB, aswell as handling database operations as a whole.

IMPROVEMENTS-
Areas to improve are, by enahncing performance optimization with caching improving response time and database load.
