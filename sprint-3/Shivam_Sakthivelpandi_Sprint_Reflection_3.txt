Sprint Reflection
During the previous sprint, my primary contributions were focused on backend development and frontend integration for our habit tracker application. I successfully completed the development of a robust RESTful API that supports operations for user habits, including endpoints for creating, updating, deleting, and retrieving habits. I also updated authentication and ensured that user data is securely handled. Beyond API development, I worked extensively on optimizing the API response structure to make it easier for the frontend team to consume and display the data efficiently.

One of the main challenges I encountered was ensuring seamless integration between the backend and frontend. Initially, the data format from the API didn’t align well with what the frontend components expected, which caused rendering issues and additional parsing logic. To address this, I coordinated with the frontend developer to understand their requirements and refactored some parts of the API response to be more frontend-friendly. This collaboration helped reduce complexity and improved the overall responsiveness of the app.

Looking ahead, one area for improvement is deploying our application to Vercel. While we made significant progress on both the frontend and backend locally, having a live deployment would allow us to test the full user experience in a production-like environment and make it easier for stakeholders to preview progress. Setting up continuous deployment with Vercel would streamline our workflow and allow us to catch integration issues early. As a team, I also believe we could benefit from more frequent check-ins or stand-ups to ensure everyone stays aligned and blockers are addressed quickly.

From this sprint, I learned the importance of clear communication between backend and frontend teams during development. Even small mismatches in data structure or naming conventions can lead to unnecessary delays. I also gained hands-on experience with tools like Postman for testing our APIs, and improved my skills in writing clean, modular, and well-documented code that’s easy for others to understand and use.